NODE js
=======
- Not a programming language.
- It is a runtime environment for javascript to run javascript code outside the webbrowser.
- built using V8 engine (same as that of google chrome)
- Single threaded. 
- it can accept multiple request at a time. 


Node js is single threaded, How it process multiple requests at a time?
-----------------------------------------------------------------------
explain the execution of js. event loop, call stack, microtask queue, callback queue.

NB: phases of js program. Memory creating phase and execution phase.

refer api.txt

How to create nodejs application?
---------------------------------
1) create a folder with application name
2) navigate to the folder
3) run npm init -y to make the nodejs application.
4) configure the script Object in package.json

file system 
------------
Node js file system allows us to work with files. common methods:

require() is used to import modules
var fs = require('fs') //import the file system module
create: fs.open();
update : fs.writeFile();
read : fs.readFile();
delete : fs.unlink();
rename : fs.rename();

eg: const fs = require("fs");
const getFileData = () => {
  fs.readFile("./sample.txt",'utf-8' ,(err, data) => {
    if (err) {
      console.log(err);
    } else {
      console.log(data);
      
    }
  });
};

getFileData();

// The 2nd argument to read readFile() is the output format. By default if you don't provide this you will get a buffer.
// If you want to convert this you can also use data.toString();

Exporting module
-----------------
To export a module in nodejs
we need to use module.exports = {functionName} in the source file
then use require() to import the exported file in the destination file.
This is because the node.js uses ES5 standard, whereas in react it uses ES6(export default functionName).

http module
------------
- used to create a server that can handle http requests. 
- it is an inbuilt module.
- http module can create a server that listens to a port and give response back to client.
- createServer() is used to create http server.

eg:
const http = require('http')
http.createServer((req,res)=>{
    res.write("Hello !!!")
    res.end(); //to stop connection
}).listen(4000);

event module
------------
used for creation of an event and trigger it whenever required. 
steps:
- import events module
- create an object of EventEmitter() inside events
- .on() is used to create an event
- .emit() is used to call the event
eg: 
    const events = require('events')
const eventEmitter = new events.EventEmitter();
eventEmitter.on('onDisplay',()=>{
    console.log("Event triggered")
});

eventEmitter.emit('onDisplay')

Backend Concepts
----------------
Client Server Architecture
--------------------------
- Client is sending the request, server resolves the request and send back the response to the client.
- API : Application Programming interface
        For communication between client(frontend) and server (Backend)

- CRUD operations: Basic database operations. (CREATE, READ, UPDATE, DELETE)
- RESTFUL API : it uses http as api creation (follows the rule of HTTP)
                get, post, put, delete - uses this methods, pass data as JSON.
                request in post method should be passed in body.

- CORS : cross origin resource sharing. frontend is running in one url in a paticular port.
            Backend is running in a differrent port in same url or differrent url. in this case the 
            browser blocks the request. to resolve this issue CORS module is used. 


Backend Application Creation for Project Fair
=============================================
1) server creation : create a folder. then run npm init -y inside the folder.
    - install modules express, cors, dotenv
        express : used to create http server
        cors : used to manage cors issue
        dotenv : is used to access data inside .env file using process.env

        to install them we use "npm install express cors dotenv"
        
        MiddleWares : it acts between request and response. it has the ability to control request response cycle.
        for injecting middlewares we use .use(middleware_name)

  nodemon: an npm module used to restart the server automatically when changes are made in the project.

  MVC Architecture
  ----------------
  Model View Controller 
  This a common architecture pattern followed by web applications.
  View: frontend, it can be react angular or vue, from frontend we are sending request, for each request we have specified path,
        and http method. 
        Routing : part of backend, where all routes are configured.
  Controller : It contains the logic to resolve the request.
  Model : structure/ schema in which the data need to be stored.
          DB : where data is stored.
  
MongoDB Connection with nodejs application
==========================================
1) Login or register to mongodb atlas
2) create a project by giving project name.
3) after creating the project create a cluster
    - select the free plan
    - give a cluster name
    - in the next screen create a database user. A default user will be shown here with you mongodb account username. and a default generated password. copy this password. if you are setting your own password make sure that you are not using special characters.
    - click done.
    - after the cluster is created click on the load sample data option.
    - after the data is loaded. click on the browse collections option. create database.
    - provide a database name and collection name.
    - click on the network access tab. click on the edit button in the list and choose allow all access option.
    - go to database tab click on the drivers option. under this there will be connection string. copy this.
4) create a .env file in the root folder of your project. create a variable and assign the copied connection string to this.
    - edit the user name, database password 
5) install mongoose from npm (npm i mongoose)
6) create a connection js file in your project.
    -   // import mongoose
        const mongoose = require('mongoose');

        const connectionString = process.env.DATABASE

        mongoose.connect(connectionString).then((res)=>{
            console.log("MongoDB connected Successfully!!!");
        }).catch((err)=>{
            console.log("Connection Error",err);
        })

    import the connection file wherever you want to use the connection
    with require('connection.js')

7) create a Model folder.
  - inside model folder create a modelSchema js file for the particular model
  - eg: 
        // import mongoose
        const mongoose = require('mongoose')

        // create schema
        const userSchema = new mongoose.Schema({
            username:{
                type:String,
                require:true
            },
            email:{
                type:String,
                require:true,
                unique:true
            },
            password:{
                type:String,
                require:true
            },
            github:{
                type:String
            },
            linkedin:{
                type:String
            },
            profile:{
                type:String
            }
        })

        // create model (name should be same as collection name)
        // first argument is the name of collection in the mongodb atlas, sencond argument is 
        // the schema object we created in the file.
        const users = mongoose.model("users",userSchema);


        // export the model
        module.exports = users;

NOTE: in this DATABASE = mongodb+srv://sangeeth695:AJjjbkbyiUBc5x0f@cluster0.vjgwu.mongodb.net/<projectfair>?retryWrites=true&w=majority&appName=Cluster0 
 the <> the database name. if database is not specified in the .env file it will create a test database. here projectfair is the database name





