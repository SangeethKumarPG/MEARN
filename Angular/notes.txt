Angular
=======
Front end technology used to create the UI. 
- First version of angular angular js.
- Version 2 uses Angular with typescript.
- typescript is a superset of javascript. It uses all the methods and properties of javascript along with
data type declaration.
- Used to create single page application(index.html), we load the components into this page.
- It is a framework unlike react. 
- We have separate file for html, css and typescript for a component.
- We use commands to create a component. When you create a component, associated html, css, ts and a
spec file is created. The spec file is used for unit testing. 
- Angular is maintained by google.
- angular application and all it's components can be created using angular-cli
- To install angular we use npm install -g @angular/cli@version
- The most commonly used version is 16
- to check if angular is installed we use
    ng v
- to create a new application 
    ng new <project-name>

- to run the project we navigate to the project directory and can use 
    ng serve -o (automatically opens the browser)
    or 
    npm start

Files and folder structure of Angular project
----------------------------------------------
.gitignore : files and folders to be ignored by git
.editorConfig : configuration for code editor
angular.json : angular project configuration file. Contains information about the project such as project name,
version, scripts, styles, and other details.
readme.md : description of the project
tsconfig.json : typescript configuration file.
node_modules : contains all the depenedencies of the project.
package.json : It include scripts, packages installed, dev dependencies etc.
package-lock.json : detailed description of package.json.
src folder : It includes components, assets, main.ts, index.html, style.css
            index.html : Only html file that renders.
            app : Base component of the application.
            style.css : Global css file for the application.
            main.ts : Entry point to the main typescript file. entry point to the application.

While creating a component 4 files will be created.
1. component.html
2. component.css
3. component.ts
4. component.spec.ts

To create a component we use the command:
ng generate component <component-name>
or 
ng g c <component-name>

unlike react there is no restriction in naming a component.
inside the component-name.component.ts file we will see the selector of the component,
we can place selector as a tag and use with other components.

To use bootstrap in angular we can use cdn approach or install it using npm.
when using cdn we copy the cdn inside the index.html file.
Data Binding
============
1. one way data binding:
    a. ts file to html file(view)
        {{}} - string interpolation, to pass data from ts to html.
    b. property bindin:
        [attribute] = value, called property binding. 
            eg:<img [src] = "imagePath"/>
    c. event binding : from html file to css file 
        syntax : (event)="method"
        eg: <button (click)="showName()">SHOW</button> 
            in the ts file we can define showName() method inside the component class. like:
            showName(){
                alert("Hello");
            }
        we can also pass arguments to the functions like:
        <button (click)="showName(7)">SHOW</button> 
        in the ts class of the component
         showName(count:number){
            alert("Hello"+" "+count);
        }
        note that we need to decalare the type of the arguments.
        To define undefined to the string we can use
        variable:string|undefined;

        if we have an array 
        variable : string[] = []
        to initialize an empty string array.

        We can use "any" type to declare a variable of any type.
        The (change) event is triggered when we press enter or when we change the focus of the input
        after entering the value.

        The $event object contains the details of the event. from this we extract the value in the ts file.
        eg:
            <input type="text" class="form-control w-25" placeholder="user name" (change)="getUserName($event)"/> 

        in the ts file we can define : 
        export class EmployeeDetailsComponent {
        getUserName(data:any){
            console.log(data.target.value);
        }
        }

        The keyup method is triggered when ever the user presses a key.

    d. using template literals:
        We can use #variable-name to refer to the element in the html file. We can pass the variable name to a 
        function in the ts file.

        <input type="text" #location class="form-control w-25 mb-3" placeholder="location"/>
        <button class="btn btn-primary mb-3" (click)="getLocation(location)">Send location</button>

        in the ts file :
        getLocation(location:any){
            alert(location.value)
        }
        // note that we don't need to use the target because we are not taking the value from event.


2. two way data binding:
- if we change the value of a component in the ts file of the component, it will reflect in the 
 view of the component.html file also. also, if we change the value in the view of the component.html file,
     it will reflect in the ts file of the component.
- we use [(ngModel)] for two way data binding.
- if we want to use ngModel we need to import FormsModule in app.module.ts file.
- if we use ngModel in any html element we need to declare name attribute also for that html element.
- no need to provide same value for name attribute and ngModel.

Place the FormsModule in the imports array of the app.module.ts file.
eg:
  <div class="row mt-2">
    <div class="col-md-6">
      <input [(ngModel)]="empSalary" type="text" class="form-control w-75" name="salary" placeholder="Salary">
      <input 
      [(ngModel)]="location"
      type="text" name="location" class="form-control w-75 mt-3" placeholder="Location">
      <button class="btn btn-primary form-control w-75 mt-3" (click)="getData()">Change</button>
    </div>
  </div>

  in the ts file:
  empSalary = 15000
  location = "Kochi"
    getData(){
        alert(`Employee salary is : ${this.empSalary}, Employee Location is : ${this.location}`);
    }

Here as you can see we are not passing the value with the event.
remember to use this keyword to access the property of the component inside a function.






