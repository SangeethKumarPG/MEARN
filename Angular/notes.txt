Angular
=======
Front end technology used to create the UI. 
- First version of angular angular js.
- Version 2 uses Angular with typescript.
- typescript is a superset of javascript. It uses all the methods and properties of javascript along with
data type declaration.
- Used to create single page application(index.html), we load the components into this page.
- It is a framework unlike react. 
- We have separate file for html, css and typescript for a component.
- We use commands to create a component. When you create a component, associated html, css, ts and a
spec file is created. The spec file is used for unit testing. 
- Angular is maintained by google.
- angular application and all it's components can be created using angular-cli
- To install angular we use npm install -g @angular/cli@version
- The most commonly used version is 16
- to check if angular is installed we use
    ng v
- to create a new application 
    ng new <project-name>

- to run the project we navigate to the project directory and can use 
    ng serve -o (automatically opens the browser)
    or 
    npm start

Files and folder structure of Angular project
----------------------------------------------
.gitignore : files and folders to be ignored by git
.editorConfig : configuration for code editor
angular.json : angular project configuration file. Contains information about the project such as project name,
version, scripts, styles, and other details.
readme.md : description of the project
tsconfig.json : typescript configuration file.
node_modules : contains all the depenedencies of the project.
package.json : It include scripts, packages installed, dev dependencies etc.
package-lock.json : detailed description of package.json.
src folder : It includes components, assets, main.ts, index.html, style.css
            index.html : Only html file that renders.
            app : Base component of the application.
            style.css : Global css file for the application.
            main.ts : Entry point to the main typescript file. entry point to the application.

While creating a component 4 files will be created.
1. component.html
2. component.css
3. component.ts
4. component.spec.ts

To create a component we use the command:
ng generate component <component-name>
or 
ng g c <component-name>

unlike react there is no restriction in naming a component.
inside the component-name.component.ts file we will see the selector of the component,
we can place selector as a tag and use with other components.

To use bootstrap in angular we can use cdn approach or install it using npm.
when using cdn we copy the cdn inside the index.html file.
Data Binding
============
1. one way data binding:
    a. ts file to html file(view)
        {{}} - string interpolation, to pass data from ts to html.
    b. property bindin:
        [attribute] = value, called property binding. 
            eg:<img [src] = "imagePath"/>
    c. event binding : from html file to css file 
        syntax : (event)="method"
        eg: <button (click)="showName()">SHOW</button> 
            in the ts file we can define showName() method inside the component class. like:
            showName(){
                alert("Hello");
            }
        we can also pass arguments to the functions like:
        <button (click)="showName(7)">SHOW</button> 
        in the ts class of the component
         showName(count:number){
            alert("Hello"+" "+count);
        }
        note that we need to decalare the type of the arguments.
        To define undefined to the string we can use
        variable:string|undefined;

        if we have an array 
        variable : string[] = []
        to initialize an empty string array.

        We can use "any" type to declare a variable of any type.
        The (change) event is triggered when we press enter or when we change the focus of the input
        after entering the value.

        The $event object contains the details of the event. from this we extract the value in the ts file.
        eg:
            <input type="text" class="form-control w-25" placeholder="user name" (change)="getUserName($event)"/> 

        in the ts file we can define : 
        export class EmployeeDetailsComponent {
        getUserName(data:any){
            console.log(data.target.value);
        }
        }

        The keyup method is triggered when ever the user presses a key.

    d. using template literals:
        We can use #variable-name to refer to the element in the html file. We can pass the variable name to a 
        function in the ts file.

        <input type="text" #location class="form-control w-25 mb-3" placeholder="location"/>
        <button class="btn btn-primary mb-3" (click)="getLocation(location)">Send location</button>

        in the ts file :
        getLocation(location:any){
            alert(location.value)
        }
        // note that we don't need to use the target because we are not taking the value from event.


2. two way data binding:
- if we change the value of a component in the ts file of the component, it will reflect in the 
 view of the component.html file also. also, if we change the value in the view of the component.html file,
     it will reflect in the ts file of the component.
- we use [(ngModel)] for two way data binding.
- if we want to use ngModel we need to import FormsModule in app.module.ts file.
- if we use ngModel in any html element we need to declare name attribute also for that html element.[Important]
- no need to provide same value for name attribute and ngModel.

Place the FormsModule in the imports array of the app.module.ts file.
eg:
  <div class="row mt-2">
    <div class="col-md-6">
      <input [(ngModel)]="empSalary" type="text" class="form-control w-75" name="salary" placeholder="Salary">
      <input 
      [(ngModel)]="location"
      type="text" name="location" class="form-control w-75 mt-3" placeholder="Location">
      <button class="btn btn-primary form-control w-75 mt-3" (click)="getData()">Change</button>
    </div>
  </div>

  in the ts file:
  empSalary = 15000
  location = "Kochi"
    getData(){
        alert(`Employee salary is : ${this.empSalary}, Employee Location is : ${this.location}`);
    }

Here as you can see we are not passing the value with the event.
remember to use this keyword to access the property of the component inside a function.


Routing
=======
Angular provides inbuilt ways for routing.
- We need to edit the routes in app-routing.module.ts file.
- For each route create an object with path and component properties.
eg:
const routes: Routes = [
  {
    path: 'register', component:RegisterComponent
  },
  {
    path:'login', component:LoginComponent
  },
  {
    path:'dashboard', component:DashboardComponent
  }
];

After this provide the <touter-outlet> tag in the app.component.html file.
eg:
<router-outlet></router-outlet>
<app-register></app-register>

Note that we don't need to wrap the router-outet tag with other components. Also make sure that
it is created in the root component which is the app.component.html file here.

to navgate to the link use the routerLink directive with the path.
eg:
<a routerLink="/register">Register</a>

To navigate from typescript file we first need to add Router service to our component. We can only navigate with 
this router dependency. We can use constructor injection to inject the Router service.
eg:
constructor(private authRouter:Router){}
login(){
    this.authRouter.navigateByUrl('/dashboard');
}

We specify the access modifier and the object name of type Router.
inside the function to navigate we use navigateByUrl method of the Router service.

Dependency injection
--------------------
Dependency injection is used to share data between classes or services.
The data can be methods, properties etc.
Dependency injection is done inside the constructor.
syntax:
constructor(access-specifier variable-name:DependencyClass){}

access-specifier: public, private, protected
variable-name: the name of the variable which will hold the instance of the dependency class.
DependencyClass: the class which we want to inject.

Services:
---------
Used to share properties or methods between multiple components.
Services are also classes that contains methods and properties.

To create a service we can use the angular cli command:
ng generate service <service-name>
or
ng g s <service-name>

after the service file is created we can define additional properties or methods in it.
To use a service in a component we pass the service as a parameter in the constructor, and access the required
property or method using this keyword.

Directives:
-----------
Directives are used to give conditional behaviours to the html dom.
3 types of directives:

1. Component Directive : 
    component itself is a directive. by using it's selector we can bind that component anywhere.
2. Structural Directive:
    It changes the structure of the html dom by adding or removing elements to the dom.
    used to provide conditional rendering.
    eg:
        *ngIf, *ngFor
3. Attribute Directive:
    To change the appearance of an html element.
    eg:[ngClass]

Structural Diretives:
---------------------
1. *ngIf:
    It is used to show or hide an element based on a condition.
    syntax:
    <div *ngIf="condition">
        // content to be shown
    </div>
    eg:
    <div *ngIf="show">
        <p>This is shown</p>
    </div>
    <div *ngIf="!show">
        <p>This is hidden</p>
    </div>
    Note that show variable is a boolean variable decalred in the ts file.

2. *ngFor:
    It is used to iterate over an array and display the elements in the dom.
    syntax:
    <div *ngFor="let item of items">
        // content to be shown
    </div>
    eg:
    userDetails:any = [
    {
      name:"Todd",
      designation:"Manager",
      location:"Kochi"
    },
    {
      name:"Sean",
      designation:"Team Lead",
      location:"TVM"
    },
    {
      name:"Clara",
      designation:"Senior SE",
      location:"Kochi"
    },
    {
      name:"Kenneth",
      designation:"Tester",
      location:"TVM"
    },
  ]
  in the html file:
  <table class="table mt-5 shadow w-50">
    <thead class="p-4">
        <tr>
            <th>#</th>
            <th>Name</th>
            <th>Designation</th>
            <th>Location</th>
        </tr>
    </thead>
    <tbody>
        <tr *ngFor="let user of userDetails; let i = index">
            <td>{{i+1}}</td>
            <td>{{user.name}}</td>
            <td>{{user.designation}}</td>
            <td>{{user.location}}</td>
        </tr>

    </tbody>
</table>

Attribute Directives:
---------------------
1. ngClass:
    It is used to add or remove a class to an element based on a condition.
    syntax:
    [ngClass]="'class1 class2'"
    [ngClass]="{'class1':condition1, 'class2':condition2}"
    [ngClass]="{'class1':condition1, 'class2':condition2, 'class3':condition3}"
    eg:
    <div [ngClass]="{'active':isActive}">
        <p>This is active</p>
    </div>
    <div [ngClass]="{'inactive':!isActive}">
        <p>This is inactive</p>
    </div>
    Note that isActive variable is a boolean variable decalred in the ts file.
    another example:
    <h3 class="m-5" [ngClass]="{'change_red':changeColor, 'change_green':!changeColor}">Angular</h3>
    <div>
        <button class="btn btn-warning ms-5" (click)="changeColor=!changeColor">CHANGE</button>
    </div>
    Note that changeColor variable is a boolean variable decalred in the ts file. it's initial value is false.
    The classes change_red and change_green are defined in the css file of the component.

    We can use (ngSubmit) to bind a function to the form submit event.
    syntax:
    <form (ngSubmit)="functionToHandleFormSubmit()">
        // form elements
    </form>

For creating alerts we use a npm module called sweetalerts2.
use the npm install command to install sweetalerts2.

import Swal from 'sweetalert2';
Swal.fire({
        title: "Login Success!",
        text: "You have successfully logged in!",
        icon: "success"
      });
to create a toast.


Dealing with Asynchronous Operation in Angular
==============================================
Observables and promises are used to handle asynchronous operations in Angular.
Observables can handle multiple requests at a time, but promises can handle only one request at a time.
Observables continously check weather the data is coming or not.
In promise we get the result in .then() method.
For the observables we use the subscribe() method to get the result.
There are 2 main states,
next - when the data is available
error - when there is an error
eg:
    this.adminService.adminAuthorize().subscribe({
        next:(res:any)=>{
          console.log("Login success")
        },
        error:(error:any)=>{
          console.log("Login failed")
        }
    })

To implemet the login fnuctionality we need to connect to the backend server and check the credentials.
To do this we need to create a service for that.

To create a service we can use the angular cli command:
ng generate service <service-name>

if we want the service to be created in a particularfolder we can navigate to the folder we  want from the terminal and use the command.

eg:
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';

@Injectable({
  providedIn: 'root'
})
export class AdminApiService {

  constructor(private httpClient: HttpClient) {}
  server_url = "http://localhost:3000"
  
  adminAuthorize(){
     return this.httpClient.get(`${this.server_url}/employee/1`);
  }
}

NOTE: we need to add the HttpClientModule in the app.module.ts file.

In the above code we are using the HttpClient to make a get request to the server.
we must return someting from the function so that we can subscribe to it.

in the login component we can use the adminService to check the credentials.
eg:
import { Component } from '@angular/core';
import Swal from'sweetalert2';
import { AdminApiService } from '../services/admin-api.service';
import { Router } from '@angular/router';
@Component({
  selector: 'app-login',
  templateUrl: './login.component.html',
  styleUrls: ['./login.component.css']
})
export class LoginComponent {
  empEmail:string = "";
  empPassword:string = "";
  constructor(private adminService: AdminApiService, private router:Router){}
  login(){
    if(!this.empEmail || !this.empPassword){
      Swal.fire({
        title: "Oops!",
        text: "Please fill the form completely",
        icon: "error"
      });
    }else{
      this.adminService.adminAuthorize().subscribe({
        next:(res:any)=>{
          console.log("Login success")
          const {email, password} = res;
          // console.log(res);
          if(email === this.empEmail && password === this.empPassword){
            Swal.fire({
              title: "Login Success!",
              text: "You have successfully logged in!",
              icon: "success"
            });
            this.router.navigateByUrl("/dashboard")
          }else{
            Swal.fire({
              title:"Incorrect Email or Password",
              text: "Please try again with correct credentials",
              icon: "error"
            })
          }
        },
        error:(error:any)=>{
          console.log("Login failed")
        }
      })
    }
  }
}
In the above code we are checking the credentials in the login function.
if the credentials are correct we are navigating to the dashboard page.
if the credentials are incorrect we are showing an error message.

We are using the observables to handle the asynchronous operation here.

Angular  LifeCycle Hooks:
=========================
From creation of a component to its destruction, there are differrent stages,
Note that before these hooks are called the constructor is called.
1. ngOnchanges: It is called when the input properties of the component changes.
2. ngOnInit: It is called after the component is initialized.
3. ngDoCheck: It is called every time the component's input properties are checked.
4. ngAfterContentInit: It is called after the content of the component is initialized.
5. ngAfterContentChecked: It is called every time the content of the component is checked.
6. ngAfterViewInit: It is called after the component's view is initialized.
7. ngAfterViewChecked: It is called every time the component's view is checked.
8. ngOnDestroy: It is called when the component is destroyed.

Are the life cycle hooks of Angular.

The ngOnInit() hook is used to initialize the component. It works similar to useEffect() hook in React.
to utilize this we need to implement the OnInit interface in the component class. and provide the implementation of the ngOnInit() method.

The [hidden] attribute is used to hide an element from the dom. we can place a condition upon which the component is hidden.

The ActivatedRoute class is used to get the URL params from the current path.
eg:
export class EmployeeEditComponent implements OnInit{
  // ActivatedRoute class is used to extract params from the URL path
  constructor(private route:ActivatedRoute) { }

  ngOnInit(): void {
    this.route.params.subscribe(
      (res:any)=>{
        console.log(res);
      }
    )
  }

we need to use subscribe to get the params.

Angular Pipes:
==============
Angular pipes are small functions or methods that can be used in the template. It will accept an input value and 
transform it into a new value.
Pipes are used to transform strings, currencies, dates etc.
2 types:
1. custom pipes: created by user.
2. Default pipes: provided by Angular.

Pipes are applied by | symbol(pipe symbol) in the template.

eg: {{employee.name | uppercase}}
similarly we can use lowercase 
to convert the string to upper and lowercase.
Similarly there is titlecase pipe to convert the first letter of each word to uppercase.

For currency symbols
{{amount | currency:'INR','symbol'}} - the symbol is optional. But it can be used to customize the currency symbol.

for date formatting
{{date | date:'dd-MM-yyyy'}} - this will format the date to dd-MM-yyyy format.

We can create custom pipes by using the angular cli
ng generate pipe <pipe-name>
or
ng g p <pipe-name>

NOTE:
In angular we can create components, pipes and services in any folder.
