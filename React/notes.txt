React JS
---------
Front-end technology used to create User Interface. 
It is a javascript library. It make use of multiple javascript libraries to create front-end.
libraries - predefined code to do a particular task.
Framework - set of libraries. Prebuilt set of tools libraries and conventions that provide a structured way to
            develop a software application.

Features of React
-----------------
- Used to create front-end 
- SPA (Single Page Application): It is a web application that  provide a seamless, dynamic user experience without the need to reload the entire,
    page from the server. In react we only have one html file called index.html file inside public folder. Browser only loads this html page, 
    while the user requests other webpages, only the content inside this index.html page reloads.

    In traditional web-application we have multiple html pages. for each iteration, the application typically loads a new page from the server
    resulting in full page refresh.

- React uses virtual DOM. 
    Real DOM - the actual representation of the webpage that browser renders.
    Virtual DOM - Lightweight representation of the real dom. 

    How react uses virtual DOM? 
        While a react application loads/starts, initially it create Real DOM along with Virtual DOM. 
        If any events happend and changes the html element, it creates a new virtual dom, then compares the newly created virtual dom with,
        previous one and finds the difference. Then react updates only the changed html elements based on the identified differences.

    Diffing: Process of compairing new virtual dom with the previous virtual dom to find the difference.
    Reconcillation: After diffing react update the real dom with only the changes. 

- React js is fully component based. 
- Data sharing is uni-directional(from parent to child component).
- Language used is JSX (combination of html css and js). File extensions for components we are generally using (.jsx).
- transpiling : process of converting jsx into javascript, css and html. babel is a compiler that performs the transpiling. 

How to create a react application?
==================================
step 1: We need to install an npm package create-react-app
        npm install -g create-react-app (to install create-react-app globally)
        npm install create-react-app (to install only in the current folder).

step 2: by using the above installed package create a react app
        npx create-react-app appname
        
step 3: navigate to the application folder and start the application using
        npm start 
        By default the react application runs in http://localhost:3000/


npm: node package manager
npx: node package execute

Files and folders in React Application
--------------------------------------
README.md : Details of the project, how to run the project etc.

package.json : Heart of the react project. It holds the npm configuration. it includes all the installed libraries/node modules.
                If we install a new module, it will automatically get updated in package.json. 
                also, it includes scripts, to run the application, test the application, build the application, execute.

package-lock.json : More detailed version of package.json file with all details of the libraries and modules with exact version number.

.gitignore : Used to add files or folders which should be excluded from git version control. By default the node_modules folder and some other files are present here.

node_modules : Folder which stores all the necessary libraries for the project. While pushing the code into version control like git we exclude this folder. When a new user
                clones the project the node modules will not be there and the project will not run. So for this we must run "npm install" to download and install the necessary 
                node modules. The dependencies present in the package.json will be used for downloading node_modules. 

public : Folder for storing files that can be accessed throughout the project. index.html is present here. index.html is the only file that the browser loads while running the react app.
        - in index.html file there is one div with id root. in that div we are binding the page/data.
        - <noscript> tag is used to pass information to developer about the page.

src: 
    index.js - Entry point to the application. here we import multiple dependencies/libraries. inside the index.js we access the root div from index.html by using
                cont root = document.getElementById("root") and then binds the app component to the root.

    app.js - this is the parent component that loads first in the index.js file.

            components: Basic unit of the react application. we can split the entire react application into small components which can be managed easier. Like header, footer, homepage.
                        While creating component, it should start with capital letter. we are using .jsx extension commonly for creating components. 

NOTE
====
In react if we want to apply class for elements, we must use className.
In return() of a component only 1 parent div should be there.
We can also use empty fragments (<>....</>) also instead of parent div tag. 
return(): Write the code which the user sees on the screen. It should contain only jsx code. 

The name of the function should be same as the component name and must start with capital letter.
After creating the component function we must export it using
export default Component;

inside the App.js we must import the component.
import Component from './Component'

To add the component place it inside the return with a self closing tag like
return(
    <div>
        <Component/>
    </div>
)

ES7+React/Redux extension for vscode. 
use rfce to create a react functional component with export.

Basic Structure of a Functional Component
-----------------------------------------
function ComponentName(){
    //javascript code
    return(
        //jsx code
        <>
            Components to be the returned.
        </>
    );
}

export default ComponentName;

Dynamic Data binding
--------------------
{} - is used to bind data dynamically. 

Differrence between app.css and index.css?
-----------------------------------------
index.css is the global style sheet whatever the styles mentioned in index.css file will affect 
throughout application. Like browser style setting, body, styles etc.

App.css : This stylesheet only belongs to app component and its immediate children. The styles mentioned in 
    app.css will only affect the html elements belonging to the App component and immediate children.


Data Transfer Between Components
================================
In react data transfer is uni directional, i.e from parent to child. 

Props
------
- It is used to send data from parent to child component.
- We pass the data from parent component to child component in
    keyName = value inside the parent component tag. 
- To access the value in the child component we must pass an argument to the Child Component function to accept an object.
    From this object we must access this using . operator or using object destructuring.

Class Components
================
Here we are using class to create component. By default a javascript class doesnot have the properties of react. For this we need to import
React class from "react". Then make the class you created a child class of React.Component class.
Inside the class define the render() method. inside the render() method define the return. Note that class component name must start with capital letter.

To access props from the class component pass the props as key value pair from the Component Tag. Inisde the class inside the render method
use 
const {key} = this.props; 
or 
const key = this.props.key;

Styling
-------
1) inline
2) External
3) modules

1) inline
----------
inside {} pass it as an object.
style = {{property1:"value", property2:"value"}}
if properties have - in them use camel case letters.
eg: background-color is defined as backgroundColor.

We can also define a const, or var inside the component function or class.
eg:
divStyle = {
    backgroundColor : 'grey',
    textAlign:'center',
    margin:'40px',
    padding: '10px'
  };

  to apply style use <div style={this.divStyle}>
  

2) External
-----------
create a .css file.
import the css file into the corresponding component.
inside the css file there is no need for export.

3) Modules 
----------
file extension : file_name.module.css
 - created inside src folder (outside the components )
 - We can store the imported module into a variable and style the elements.
 -  Can be accessed throughout the project

Events 
=======
Actions performed by the user which leads to some updates in DOM.
eg: button click, mouse hover, keydown etc.

Button click
------------
    event: onClick={}
    two types:
        1) Without arguments
            onClick = {function_name}
        2) With arguments from jsx code to js code. Here we call function as callback function.
            onClick = {()=> function_name(arguments)}
    
    Getting Value from input field
    -------------------------------
    onChange() method is used to get value from input field.
    syntax:
        <input type="text" onChange={(e)=>function_name(e)}/>

    To get the value:
        e.target.value;

Conditional Rendering
=====================
Loading condition in browser based on some condition
1)if
    operator used is called truthy operator (&&)
2)if else 
    operator used is ternary operator (?:)

NOTE:
=====
When using js code inside the return() defining code blocks for methods is done by ().
eg:
            <tbody>
          {userData.map((item, index) => (
            <tr>
              <td>{index + 1}</td>
              <td>{item.name}</td>
              <td>{item.age}</td>
              <td>{item.position}</td>
            </tr>
          ))}
        </tbody>

State
=====
State is an object which is used to store property of the react class component.
Whenever the value of the state changes the entire component re renders.
eg:
    import React, { Component } from "react";

    export default class Random extends Component {
        constructor() {
            super();
            this.state = { carName: "Polo" };
        }
        render() {
            return (
            <>
                <div>Random</div>
                <h3>Car name : {this.state.carName}</h3>
            </>
            );
        }
    }

note that inside the constructor super is called.


setState() method is used to update the value of state.

Lifecycle of a react class component
====================================
stages through which an object pass through from the creation of the component till destruction.
1) Mounting Phase : Adding or binding the component into DOM. 
    - constructor is executed first.
    - getDerivedStateFromProps() : This method will check if any data is coming in props. 
    - render() : loads the jsx code into dom. 
    - componentDidMount() : 
2) Updating Phase : 
    Updating the Dom
    - getDerivedStateFromProps() : is called first. Checks weather if there are any changes to the component props values.
    - shouldComponentUpdate() : return true or false depending weather there is an update the the component props.
    - getSnapShotBeforeUpdate() : creates a snapshot of the virtual dom before update.
    - render(): renders the changes to the components.
    - componentDidUpdate() : checks weather the changes are applied.
3) Unmounting Phase : 
    - componentWillUnmount() : does the unmounting of the component. 

React Hooks
===========
Predefined functions used to give specific features to functional components.
eg: useState()
    useEffect()  

Usage
-----
1) import hooks from React library to the functional component.
2) call react hooks at the top level of js code of functional component.
3) Hooks cannot be used on conditions such as if and if else.

Differrent types of hooks
-------------------------
1) predefined : in built, we can use it directly by importing. It performs a particular function.
    eg: useState(), useEffect()
2) custom : created by user for specific need.

Stateful component and stateless component
------------------------------------------
- class component is stateful component, because state is inbuilt on class component
    we can directly use it by calling this.state. the setState() method can be used to change the value of state.
- functional component is stateless component, by default functional component doesnot have a state.
- for implementing state in functional component, we have to import state from react library.
- useState() is the hook used to implement the state in functional component.

useState() hook
-----------------
This hook is used to implement state in functional component.
Syntax:
    const [variable_name, method_name] = useState("initial value")
    variable_name : holds the value of the state
    method : used to update the value of the state.
    initial value : is not mandatory

we must import the useState() method from react
i.e : import {useState} from 'react'

NOTE:
=====
When changing the state the entire state is replaced with new state. if the state consists of multiple objects 
and you are Updating a single object all the remaining objects will be removed from the state. To avoid this we 
use '...' spread operator.
eg: 
    const [colors, setColors] = useState({
        first:"red",
        second:"blue",
        third:"yellow",
        fourth : "green"
    })
    onClick={()=> setColors({...colors, second:"orange"})}

React Forms 
===========

e.preventDefault() is used to prevent the default page refresh of html forms on submit. This is used inside 
the onsubmit handler function. the handler function must get the event e as an argument.



Using Bootstrap in React
========================
1) Using CDN : We can copy the cdn url from the bootstrap website and paste it inside the head section of index.html.
2) By installing bootstrap in our application : 
    using the npm install bootstrap command
                eg: npm install bootstrap@5.3.3

    will install the bootstrap inside the project. 
    After this import the bootstrap.min css file inside the index.js 
    i.e import 'bootstrap/dist/css/bootstrap.min.css' 

    Now we can use the bootstrap classes for our react components. 




Regular Expressions
===================
It is used to check weather a given string have a particular pattern. 
Rules to create a regular expression:
- It should have foward slash "/" at the begining and ending.
- starting of the expression is indicated by "^" symbol.
- Ending of the expression is indicated by "$"

    eg: /^[0-9]*$/ This expression check if only numbers are present in the string.

        /^[A-Za-z]*$/ This checks if there are only alphabets in the input.
    usage : var x = "123"
            !!x.match(/^[0-9]*$/)
            !! is used to convert the value of the match() function to a boolean value.

    


NOTE:
=====
To build react project use 

npm run build

after running this you will get a build folder inside the project folder.
We have to deploy this build folder.

Pure Function
=============
1) Always produces the same output
    - that means no matter how many times we call the function with same arguments it will return the same result.
    - content inside the pure function does not change based on the external data that is coming from API or state change.
    - it doesnot have side effects. eg of side effects are API calls, IO operations, read/write files.
        pure function cannot be affected by side effects.
        


useEffect() hook
================
useEffect(()=>{
    // Runs on the first render 
    // and anytime any dependency value changes.(it runs when the passed props or state value changes)
},[prop, state])


NOTE:
=====
When binding data from api's use ?. to make sure that the attribute of json object is binded correctly.
eg:  movie?.overview
    movie?.overview?.length <= 200
    

Vite
====
- Vite is a modern front-end build tool that offers a fast development experience for web developers.
    - it can be used with react
    - it makes building of the project very quick
    - it replaces traditional build tool 'webpack'

How to create React application using Vite
------------------------------------------

npm create vite@latest application_name -- --template react
- navigate to the application folder name and execute npm install
- npm run dev : use to run the react application.

Routing 
=======
- Routing is navigating one page to another or loading some other component.
- To enable routing in your application :

    - install react router dom from npm by using npm i react-router-dom
    - import BrowserRouter from react-router-dom.
    - inside the main.jsx file wrap the App component inside <BrowserRouter></BrowserRouter> tag like:
            <BrowserRouter>
                <App />
            </BrowserRouter>
    - inside the App.jsx we will provide the necessary routes.
    - inside the main of the app component define the Routes tag
        inside it define the individual routes
        eg:<>
                <Header/>
                <Routes>
                    <Route path="/" element={<Landing/>}/>
                    <Route path='/home' element={<Home/>}/>
                    <Route path='/watch' element={<WatchHistory/>}/>
                </Routes>
                <Footer/>
        path attribute specifies the path. the element attribute specifies the component to be loaded.
        
    - To use the routes we need to use <Link> <Link> tag in our components where we need to place links.
        eg: 
            <Link to="/">
                Landing Page
            </Link>
            <Link to="/home">
                Home
            </Link>
            <Link to="/watch">
                Watch History
            </Link>

Data Communication in React
===========================
1) Redux - used for communication between unrelated components
2) Context API - used for communication between unrelated components
3) State Lifting - for Communication between sibling components(components with same parents)

3) State Lifting
----------------
- state lifting is used to pass data between sibling components.
- We create a common state in parent component and pass it to child components.
- We are using this to bind data to the UI without refreshing the page. 
- Here we pass the setter of the useState to the component which updates the data. and 
  we pass the state name to the component which needs the updated data. we are passing it as props.
  in the component which requires the updated data we call the use effect with the prop name inside the []

  eg:

  const [uploadVideoStatus, setUploadVideoStatus] = useState({});
  in the parent component Home

  in the child component Add.jsx which updates the data
  we use :
  <Add setUploadVideoStatus={setUploadVideoStatus}/>
        function Add({setUploadVideoStatus}) {
            ....
            setUploadVideoStatus("set the data");

        }
    in the child component View.jsx which needs to update the data:
    <View videoStatus={uploadVideoStatus}/>
    function View({videoStatus}) {

        ....
          useEffect(() => {
            getVideos();
        }, [videoStatus]);

    }

2) Redux
===========
Used to transfer data between components. 

Props Drilling : passing the props from the parent component to the child component and then to the 
    grand child component (deeply nested child component) which requires the data from the parent.
    This require the props to be passed through intermediate components.
    
    disadvantages : 
    ---------------
    1) Tightly couples components together(components become dependent on other components).
    2) There is a chance of lossing data in between any components, if the corresponding intermediate component fails.
    3) intermediate components doesnot need any data since they are only passing it down to the child components.
    4) It makes the code more complex.

Solution to this props drilling is Redux, Context API.

Redux is a state management library that allows us to store the entire application's state in a central store, making it accessible 
to any component in the tree.

Redux is a javascript library. It can be used with any front-end technology. It can be used with Angular, react, vue etc.

There are mainly 3 components in Redux

1) store : we are creating a state in the store and we will make that state global. Component has no ability to update the value
            in state. But component has the ability to read the store.

2) Action:
        - It holds the logic to update the state.
        - Dispatch is a method used to call update function inside action.
        - After applying the logical operation, action sends the response(payload) to the reducer.
          payload is the response after the logical operation. 

3) Reducer : It updates the state inside the store. 

This is the exact Redux. But now we are using Redux Toolkit.

Redux Toolkit
-------------
- It is an advanced version of redux.
- Here action and reducer is written in single file, combination of action and reducer is called slice.

To install redux toolkit 

install 

npm install @reduxjs/toolkit 
and 
npm install react-redux

after this inside the src folder of the react project create a new folder for storing redux files.
inside this create store.js and slice.js. these file names should start with small letter, otherwise react may consider it as a component.

inside the store we will need to configure store.
For this we import configureStore from "@reduxjs/toolkit"

then create a variable store to configureStore. The configureStore accepts a javascript object as argument.
inside this we define a key reducer, which defines the reducers we have. 


import {configureStore} from "@reduxjs/toolkit"

// this will mark the file as store
export const store = configureStore({
    reducer:{
        // add reducers here
    }
})

after this wrap the App component in the main javascript file inside the Provider tag. point the store js file with
the store key.

  <StrictMode>
    <Provider store={store}>
      <App />
    </Provider>
  </StrictMode>

  note that both imports should be present in the main file 
import { Provider } from "react-redux";
import { store } from "./redux/store.js";

next inside the slice file define create a variable and call the createSlice() method to mark it as slice.
then inside this define the name, initial value, and the reducers. inside  the reducer object define the actions.

eg:
import { createSlice } from "@reduxjs/toolkit";

// to initialize the file as slice we use a method createSlice.
export const counterSlicer = createSlice({
    //name has no importance
    name:'counterApp',
    initialState:{
        value: 0
    },
    reducers:{
        // logic to update the value
        // actions are created inside the reducers 
        increment:(state)=>{
            state.value += 1
        },
        decrement:(state)=>{
            state.value -= 1
        },
        reset:(state)=>{
            state.value = 0
        }
    }
})

// Export the action methods. Her even though we have defined the methods in reducers. 
// actually it is getting stored in the actions key by redux. 
// Similarly we need to export the reducer from the slicerInstance. the reducer key is created by redux.
export const {increment, decrement, reset} = counterSlicer.actions;
export default counterSlicer.reducer;

after this define the reducer to the reducer key in the store.

import {configureStore} from "@reduxjs/toolkit"
import  counterSlicer  from "./slice" // note that we don't use {} for the slice Object when importing


export const store = configureStore({
    reducer:{
        // add reducers here
        counter: counterSlicer
    }
})

the final component file will be like
import React from 'react'
import {useDispatch, useSelector} from 'react-redux'
import { decrement, increment, reset } from '../redux/slice'; //make sure that this is imported

function Counter() {
  // Component can access the state by useSelector hook
  const counterValue = useSelector((state)=>state.counter.value);
  console.log(counterValue);

  //useDispatch() is a hook used to call a method in action to update the state
  const dispatch = useDispatch();
  return (
    <div>
        <div className='d-flex align-items-center justify-content-center w-100 flex-column'>
            <h1 className='display-1' style={{color:"#03346E"}}>{counterValue}</h1>
            <div className='mt-3'>
            {/* note that we are passing the functions as callbacks to the dispatch() so we need to specify () along the action function name*/}
                <button className='btn btn-warning p-2 ' onClick={()=>dispatch(increment())}>INCREMENT</button>
                <button className='btn btn-success p-2 ms-3' onClick={()=> dispatch(decrement())}>DECREMENT</button>
                <button className='btn btn-danger p-2 ms-3' onClick={()=> dispatch(reset())}>RESET</button>
            </div>
        </div> 
    </div>
  )
}

export default Counter

if we want to pass data to action function, we need to pass the data argument to the particular action function and to access the data, we must use 
data.payload.

Thunk
=====
Redux is a syncronous operation. File read/write, api calls are asynchronous operation; so to deal with asynchronous operation in redux,
we are using Redux Thunk. Thunk is not a part of slice. It is a seperate method in redux toolkit.

When creating thunk, we define a thunk function in the slice file. the thunk is middleware feature in redux for asynchronous operations.
we must import the createAsyncThunk from @reduxjs/toolkit. then define a function. It uses promises.
the first argument is 'nameof the slice/nameof the thunk function'
eg: export const fetchRestaurant = createAsyncThunk('restaurantSlice/fetchRestaurant', ()=>{
    const result = axios.get('./restaurant.json').then(response=>response.data);
    console.log("Response from thunk");
    console.log(result);
    return result;
}) is the thunk function.
and the slice is const restarantSlice = createSlice({
    name:"restaurantSlice",
    initialState : {
        loading: false, //pending state means, api call in progress
        allRestaurants : [], //resolve state
        error:"" //rejected state
    }

})

The thunk action functions are stored under extraReducers function(key). it accepts a builder as argument.
For every case of promise (pending, fullfilled, rejected), we need to handle them and set the appropriate states.

inside extraReducers:(builder)=>{
    //we need to define 
    builder.addCase(thunkFunctionName.stateOfPromise,   (state, action)=>{
        //set states
        //get data from action.payload
        // if error get the error message from action.error.message

        // Note that in the pending state there is no need to pass the action argument
    })
} 

the entire file slice file look like,
import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import axios from 'axios'
//Api call or asynchronous function call using Thunk
export const fetchRestaurant = createAsyncThunk('restaurantSlice/fetchRestaurant', ()=>{
    const result = axios.get('./restaurant.json').then(response=>response.data);
    console.log("Response from thunk");
    console.log(result);
    return result;
})

const restarantSlice = createSlice({
    name:"restaurantSlice",
    initialState : {
        loading: false, //pending state means, api call in progress
        allRestaurants : [], //resolve state
        error:"" //rejected state
    },
    extraReducers:(builder)=>{
        builder.addCase(fetchRestaurant.pending, state=>{
            state.loading = true;
        }),
        builder.addCase(fetchRestaurant.fulfilled, (state, action)=>{
            state.loading = false;
            state.allRestaurants = action.payload;
            state.error = ""; 
        }),
        builder.addCase(fetchRestaurant.rejected,(state, action)=>{
            state.loading = false;
            state.allRestaurants = [],
            state.error = action.error.message;
        })
    }

})

export default restarantSlice.reducer;

NOTE:
=====
the name we are using inside the use selector is the 'key' name of the slice in store(inside the reducers)
this will give all the objects in the state. we can access the objects we need.

Dynamically binding data to url
===============================
<Route path='/restaurant_view/:id' element={<RestaurantView/>}/>
if we use /:varible we are telling react that the variable(path) is passed dynamically.
eg: 
In the location we want to redirect we should use <Link to={`/restaurant_view/${restaurant?.id}`} style={{textDecoration:"none"}}>

note the structure of to= .

the useParams() is a hook of react router dom to get the path data. here we use it like

const data = useParam();
const id = data.id;

or use it like
const {id} = useParam();

NOTE
====
When using ToastContainer of react-toastify.
1) make sure to import the css file along with the ToastContainer component where you place the ToastContainer.
2) only place one ToastContainer (if using multiple containers define the container id's. make sure that another ToastContainer is not present in the immediate parent or child)
3) we can call the toast function from any component.


NOTE
====
If you are using cards in your layout and if the size of the cards are not uniform we can set set a static height to them so that they look 
uniform.
